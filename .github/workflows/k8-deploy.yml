# name: integration-tests

# on:
#   push:
#     branches:    
#       - 'master'

# jobs:          
#   # integration-tests:
#   #     runs-on: ubuntu-latest
#   #     steps: 
#   #       - uses: actions/checkout@v2
#   #         with:
#   #           fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
  
#   #       - name: Start the elasticsearch docker container
#   #         run: |
#   #           docker run -d -p 9200:9200 -e "discovery.type=single-node" docker.elastic.co/elasticsearch/elasticsearch:7.12.0
#   #           echo "127.0.0.1 elasticsearch" | sudo tee -a /etc/hosts
#   #       - name: Install backend and frontend dependencies
#   #         run: |
#   #           pip3 install -r backend/requirements.txt
#   #           npm i --prefix frontend
#   #       - name: Start backend and frontend applications in the background
#   #         run: |
#   #           python3 backend/main.py &
#   #           sleep 10
            
#   #       - name: API testing
#   #         run: |
#   #           npm run start --prefix frontend &
#   #           pytest backend --doctest-modules --junitxml=junit/test-results.xml --cov=. --cov-report=xml

#   #       - name: Cypress End to End testing
#   #         run: |
#   #           cd frontend
#   #           sudo npm install -g --unsafe-perm=true --allow-root cypress
#   #           sudo cypress run --headless --browser chrome

#   #       - name: SonarCloud Scan
#   #         uses: SonarSource/sonarcloud-github-action@master
#   #         env:
#   #           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
#   #           SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

#   build-and-push-docker-image:
#     name: Build Docker image and push to Docker registry
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v2
#       - name: Set up Docker Buildx
#         id: buildx
#         uses: docker/setup-buildx-action@v1
#       - name: Login to Github Packages
#         uses: docker/login-action@v1
#         with:
#           registry: ghcr.io
#           username: ${{ github.actor }}
#           password: ${{ secrets.GITHUB_TOKEN }}
#       - name: Build image and push to Docker Hub and GitHub Container Registry
#         uses: docker/build-push-action@v2
#         with:
#           context: .
#           tags: |
#             ghcr.io/alitoufighi/asb-sh-backend:stable
#             ghcr.io/alitoufighi/asb-sh-backend:${{ github.RUN_ID }}
#           push: true
#           builder: ${{ steps.buildx.outputs.name }}
#           cache-from: type=registry,ref=ghcr.io/alitoufighi/asb-sh-backend
#           cache-to: type=registry,ref=ghcr.io/alitoufighi/asb-sh-backend,mode=max

#   build-and-push-docker-image:
#     needs: build-and-push-docker-image
#     runs-on: ubuntu-latest
#     steps:
#     - uses: actions/checkout@master
    
#     - uses: danielr1996/kubectl-action@1.0.0
#       name: Backend deployment rolling restart to fetch recently build docker image from docker hub.
#       with:
#         kubeconfig: ${{ secrets.KUBE_CONFIG_DATA }}
#         args: rollout restart deployment search-backend -n=dinesh
    
#     - uses: danielr1996/kubectl-action@1.0.0
#       name: Verify deployment for backend app
#       with:
#         kubeconfig: ${{ secrets.KUBE_CONFIG_DATA }}
#         args: rollout status deployment/search-backend -n=dinesh

#     - uses: danielr1996/kubectl-action@1.0.0
#       name: Frontend deployment rolling restart to fetch recently build docker image from docker hub.
#       with:
#         kubeconfig: ${{ secrets.KUBE_CONFIG_DATA }}
#         args: rollout restart deployment search-frontend -n=dinesh
    
#     - uses: danielr1996/kubectl-action@1.0.0
#       name: Verify deployment for frontend app
#       with:
#         kubeconfig: ${{ secrets.KUBE_CONFIG_DATA }}
#         args: rollout status deployment/search-frontend -n=dinesh
